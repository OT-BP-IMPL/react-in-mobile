plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "com.github.node-gradle.node"
}

android {
    namespace 'live.ditto.reactinmobile'
    compileSdk 34

    defaultConfig {
        applicationId "live.ditto.reactinmobile"
        minSdk 30
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        // https://developer.android.com/jetpack/androidx/releases/compose-kotlin
        kotlinCompilerExtensionVersion '1.5.5'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // You will need this to load local JS and CSS files in the WebView
    implementation "androidx.webkit:webkit:1.9.0"

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation platform('androidx.compose:compose-bom:2023.09.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3:1.1.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.09.01')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.5.4'
}

/**
 * Node plugin configuration
 * https://github.com/node-gradle/gradle-node-plugin/blob/master/docs/usage.md#configuring-the-plugin
 */
node {
    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    nodeProjectDir.set(file("../../web"))
}

/**
 * This task builds the vite project at ../../web folder.
 */
def buildWeb = tasks.register('buildWeb', NpmTask) {
    args = ['run', 'build']
    doFirst {
        println 'Executing `npm run build` in ../../web'
    }
    dependsOn npmInstall
}

/**
 * Removes the assets generated by the `buildWeb` task.
 */
def cleanWeb = tasks.register('cleanWeb', Delete) {
    description = 'Removes web assets generated by vite'
    delete '../../web/dist'
}

/**
 * This task clears the Android assets folder.
 * This is necessary because the Android build process does not clear the assets folder.
 */
def cleanAssets = tasks.register('cleanAssets', Delete) {
    delete 'src/main/assets/dist'
    dependsOn buildWeb
}

/**
 * This task copies the the vite project at ../../web/dist folder to the Android assets folder.
 */
def copyDistToAssets = tasks.register('copyDistToAssets', Copy) {
    from '../../web/dist'
    into 'src/main/assets/dist'
    dependsOn buildWeb
    dependsOn cleanAssets
}

/*
 * Hooks the custom `copyDistToAssets` task into running before the app build.
 */
tasks.named("preBuild") {
    dependsOn copyDistToAssets
}

/** Include cleanAssets when running a project clean */
tasks.named('clean') {
    dependsOn cleanWeb
    dependsOn cleanAssets
}
